#+TITLE: YZ@ Languages and Grammars 
#+LANGUAGE: en
#+OPTIONS: H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t
#+OPTIONS: html-postamble:nil
#+STARTUP: showeverything entitiespretty
#+SETUPFILE: theme-bigblow.setup
 
[[elisp:(find-file-other-window%20"generic-instructions.org")][Read Instructions]]
[[elisp:(progn%20(save-buffer)%20(browse-url-of-file%20(org-html-export-to-html)))][Export to HTML and Browse]]
[[elisp:(progn%20(save-buffer)%20(org-clock-report%201)%20(save-buffer))][Insert/Update Clock Summary Report]]
#+BEGIN: clocktable :scope file :maxlevel 2
#+CAPTION: Clock summary at [2018-12-15 Sat 23:11]
| Headline                              |   Time |      |
|---------------------------------------+--------+------|
| *Total time*                          | *2:57* |      |
|---------------------------------------+--------+------|
| Investigate the Lambda Calculus       |   2:32 |      |
| Concretize the Abstract by Writing... |   0:25 |      |
| \_  Recursing with Primitives         |        | 0:01 |
| \_  Go Another Step Up                |        | 0:03 |
| \_  Convert python to elisp           |        | 0:06 |
#+END:

* DONE Investigate the Lambda Calculus
  CLOSED: [2018-12-15 Sat 23:09]
  :LOGBOOK:
  CLOCK: [2018-12-15 Sat 21:12]--[2018-12-15 Sat 23:09] =>  1:57
  CLOCK: [2018-12-10 Mon 17:25]--[2018-12-10 Mon 18:00] =>  0:35
  :END:
  The lambda calculus is nothing like the calculus that deals with derivatives
  and integrals!

  [[http://www.inf.fu-berlin.de/inst/ag-ki/rojas_home/documents/tutorials/lambda.pdf][This document]] describes it and its connection to [[https://firstthreeodds.org/17657741833134731255/an-introduction-to-functional-programming.pdf][functional programming]].

  As you will see, the grammar describing a lambda calculus expression is pretty
  simple --- all of three productions!

  [[https://firstthreeodds.org/the-epi-phenomenon.pdf][This document]] describes something you should be aware of if you aren\rsquo{}t already.

  How do they tie together? Explain in a few paragraphs your understanding of
  the many interconnections between these topics.

  :Notes:
  
  The \lambda-calculus can be called the smallest universal programming 
  language in the world.

  The \lambda-calculus is universal in the sense that any computable function can 
  be expressed and evaluated using this formalism. It is thus equivalent
  to Turing machines.

  :END:
  
  :\lambda-Calculus_AND_FUNCTIONAL_PROGRAMMING:
  
  According to Wikipedia:
  In computer science, functional programming is a programming paradigm\mdash\mdash^{}a style
  of building the structure and elements of computer programs.

  How do \lambda-calculus and Functional Programming tie together:
  Functional programming languages are based on Lambda Calculus [1].
  With lambda calculus functions are not named. This createes a problem
  when you want to be able to call the function from anywhere. that
  problem is not an issue in functional programming. In functional programming
  you can name your functions so that they can be called and call themselves.

  :END:

  :REFERENCES:
  [1] http://joycse06.github.io/blog/2016/07/intro-to-lambda-calculus-and-its-relation-to-functional-programming/
  :END:

* DONE Concretize the Abstract by Writing Some Code
  CLOSED: [2018-12-10 Mon 17:09]
  :LOGBOOK:
  CLOCK: [2018-12-10 Mon 17:09]--[2018-12-10 Mon 17:24] =>  0:15
  :END:
  Expressions in the lambda calculus are pretty primitive, so we programmers
  like to reformulate them in terms of less primitive operations. For example,
  the initialization and binding of local variables using =let= is \ldquo{}syntactic
  sugar\rdquo for a lambda expression applied to other expressions. First, a lambda
  example:

#+BEGIN_SRC elisp :results raw
  ((lambda (x y z) (list '= x (+ y z))) 5 2 3)
#+END_SRC

#+RESULTS:
(= 5 5)

  The same construct using =let=:
#+BEGIN_SRC elisp :results raw
  (let ((x 5)
        (y 2)
        (z 3))
    (list '= x (+ y z)))
#+END_SRC

#+RESULTS:
(= 5 5)

  The bodies are the same, only the \ldquo{}appendages\rdquo differ.

  The Identity lambda:
#+BEGIN_SRC elisp :results silent
  (fset 'I (setq I (lambda (x) x)))
#+END_SRC

#+BEGIN_SRC elisp :results raw
  (I '(1 2 3))
#+END_SRC

#+RESULTS:
(1 2 3)
(1 2 3)
(1 2 3)
(1 2 3)

#+BEGIN_SRC elisp :results raw
  (I (I (I I)))
#+END_SRC

#+RESULTS:
(lambda (x) x)
(lambda (x) x)
(lambda (x) x)
(lambda (x) x)

  The Zero lambda:
#+BEGIN_SRC elisp :results silent
  (fset 'Z (setq Z (lambda (x) (lambda (y) y))))
#+END_SRC
(funcall (Z 1) 1)
   Try out [[http://projectultimatum.org/cgi-bin/lambda][Hai (Paul) Liuâ€™s step-by-step Lambda Viewer]] on the examples in the
   Lambda Calculus tutorial linked-to above.

  The Successor lambda:
#+BEGIN_SRC elisp :results silent
  ;; ??? 
  (fset 'S (setq S (lambda (x) (lambda (y) (lambda (z) (funcall y (funcall (funcall x y) z)))))))
#+END_SRC
(defmacro church2nat (c)
  (funcall (funcall c '1+) 0))
(church2nat (S Z))

(require 'cl)
(eval S Z)(closure (lambda (x) (lambda (y) y)) (x) (lambda (y) (lambda (z) (funcall y (funcall (funcall x y) z)))))
#+BEGIN_SRC elisp
  (closure (lambda (x) (lambda (y) y)) (x) (lambda (y) (lambda (z) (funcall y (funcall (funcall x y) z)))))
#+END_SRC
  What about python?
#+BEGIN_SRC python :results output
  I = lambda c: c                                # Identity
  Z = lambda b: lambda c: c                      # Number 0 (Zero)
  S = lambda a: lambda b: lambda c: b(a(b)(c))   # Successor

  print("S(Z) -->")
  print(S(Z))
  print("S(S(Z)) -->")
  print(S(S(Z)))

  def increment(n):
      return n+1

  print("increment(1) -->")
  print(increment(1))

  def ChurchToNat(c):
      return c(increment)(0)

  def ChurchToNat(c):
      return c(increment)(0)

  print("ChurchToNat(Z) -->")
  print(ChurchToNat(Z))

  print("ChurchToNat(S(Z)) -->")
  print(ChurchToNat(S(Z)))

  print("ChurchToNat(S(S(Z))) -->")
  print(ChurchToNat(S(S(Z))))

  def NatToChurch(n):
      if n == 0:
          return Z
      else:
          return S(NatToChurch(n-1))

  print("ChurchToNat(NatToChurch(3)) -->")
  print(ChurchToNat(NatToChurch(3)))
#+END_SRC

#+RESULTS:
#+begin_example
S(Z) -->
<function <lambda> at 0x10ba5bd70>
S(S(Z)) -->
<function <lambda> at 0x10ba62c08>
increment(1) -->
2
ChurchToNat(Z) -->
0
ChurchToNat(S(Z)) -->
1
ChurchToNat(S(S(Z))) -->
2
ChurchToNat(NatToChurch(3)) -->
3
#+end_example

** Recursing with Primitives
   :LOGBOOK:
   CLOCK: [2018-12-10 Mon 16:54]--[2018-12-10 Mon 16:55] =>  0:01
   :END:

  Recursion manifests itself in functions that call themselves, or /simpler/
  versions of themselves. Primitives once wrapped in recursive calls become less
  primitive with each additional wrapping layer.

  For example, the recursive rules for addition are just the following two
  equations:

  (+1) x + 0 = x
  (+2) x + s(y) = s(x + y)

  Thus, the successor function (s) allows us to define addition as what it
  fundamentally is: repeated (recursive) counting. Two more equations define the
  recursive rules for multiplication in terms of repeated addition (5 \times 4 = 5 +
  5 + 5 + 5), reducing the calculation of a product to the calculation of sums:

  (\times{}1) x \times 0 = 0
  (\times{}2) x \times s(y) = x + (x \times y)

  Here are these functions in python:
#+BEGIN_SRC python :results output
  def s(x):
    return x + 1

  def add(x, y):
    if (y == 0):
      return x
    else:
      return s(add(x, y - 1)) 

  def mul(x, y):
    if (y == 0):
      return 0
    else:
      return add(x, mul(x, y - 1))

  print("add(5, 3) -->")
  print(add(5, 3))

  print("mul(5, 3) -->")
  print(mul(5, 3))
#+END_SRC

#+RESULTS:
: add(5, 3) -->
: 8
: mul(5, 3) -->
: 15

** DONE Go Another Step Up
   CLOSED: [2018-12-10 Mon 16:59]
   :LOGBOOK:
   CLOCK: [2018-12-10 Mon 16:56]--[2018-12-10 Mon 16:59] =>  0:03
   :END:
   Define exp(x, y) in terms of repeated multiplication, and supply the
   equations for exponentiation. (5^4 = 5 \times 5 \times 5 \times 5, exemplifying reducing
   exponentiation to the calculation of products.)

#+BEGIN_SRC python :results output
  # what goes here to get the RESULTS below?
  def s(x):
    return x + 1

  def add(x, y):
    if (y == 0):
      return x
    else:
      return s(add(x, y - 1)) 

  def mul(x, y):
    if (y == 0):
      return 0
    else:
      return add(x, mul(x, y - 1))
  
  def exp(x, y):
    if (y == 0):
      return 1
    else:
      return mul(x, exp(x, y - 1))

  print("exp(5, 3) -->")
  print(exp(5, 3))
#+END_SRC

#+RESULTS:
: exp(5, 3) -->
: 125

** DONE Convert python to elisp
   CLOSED: [2018-12-10 Mon 17:06]
   :LOGBOOK:
   CLOCK: [2018-12-10 Mon 17:00]--[2018-12-10 Mon 17:06] =>  0:06
   :END:

  Find a way to define the S (Successor) function in elisp, then define
  addition, multiplication and exponentiation to behave like the python code.

#+BEGIN_SRC elisp
  (defun s (x)
    (+ x 1))
    
  (defun add (x y)
    (if (= y 0)
        x
        (s (add x (- y 1)))))

  (defun mul (x y)
    (if (= y 0)
        0
        (add x (mul x (- y 1)))))

  (defun exp (x y)
    (if (= y 0)
        1
        (mul x (exp x (- y 1)))))

  (exp 5 3)
#+END_SRC

#+RESULTS:
: 125

