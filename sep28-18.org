
(defun print-table (tabl)
  (loop for row in tabl
     do (loop for item in row
          do (princ (format "|%s" item)))
     do (princ (format "|\n")))
  (previous-line (length tabl))
  (org-cycle)
  (return "")
)

(describe-function last-command)



(print-table (truth-table-create 3 '(a b d out)))
| a | b | d | out |
|---+---+---+-----|
| 0 | 0 | 0 |     |
| 0 | 0 | 1 |     |
| 0 | 1 | 0 |     |
| 0 | 1 | 1 |     |
| 1 | 0 | 0 |     |
| 1 | 0 | 1 |     |
| 1 | 1 | 0 |     |
| 1 | 1 | 1 |     |


#+BEGIN_SRC elisp
  (truth-table-create 3 '(d b e out))
#+END_SRC

#+RESULTS:
| d | b | e | out |
|---+---+---+-----|
| 0 | 0 | 0 |     |
| 0 | 0 | 1 |     |
| 0 | 1 | 0 |     |
| 0 | 1 | 1 |     |
| 1 | 0 | 0 |     |
| 1 | 0 | 1 |     |
| 1 | 1 | 0 |     |
| 1 | 1 | 1 |     |

(print-table '((1 2 3) (4 5 6)))
| 1 | 2 | 3 |
| 4 | 5 | 6 |


(defun pttc (&optional vars names)
  (cond 
        ((and (numberp vars) (consp names)) 
          (print-table (truth-table-create vars names)))
        ((numberp vars)
          (print-table (truth-table-create vars)))
        ( t 
          (print-table (truth-table-create 3 '(in1 in2 in3 out))))))



(pttc)
| in1 | in2 | in3 | out |
|-----+-----+-----+-----|
|   0 |   0 |   0 |     |
|   0 |   0 |   1 |     |
|   0 |   1 |   0 |     |
|   0 |   1 |   1 |     |
|   1 |   0 |   0 |     |
|   1 |   0 |   1 |     |
|   1 |   1 |   0 |     |
|   1 |   1 |   1 |     |

