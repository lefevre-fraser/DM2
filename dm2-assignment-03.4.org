#+TITLE: DM2 Assignment 03.4
#+LANGUAGE: en
#+OPTIONS: H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t
#+OPTIONS: html-postamble:nil
#+STARTUP: showeverything entitiespretty
#+SETUPFILE: theme-bigblow.setup

[[elisp:(relocate-file-to-work-folder)][Relocate File to Work Folder]]
[[elisp:(browse-url-of-file%20(org-html-export-to-html))][Export to HTML and Browse]]
[[elisp:(org-clock-report%201)][Insert/Update Clock Summary Report]]
#+BEGIN: clocktable :scope file :maxlevel 2
#+CAPTION: Clock summary at [2018-10-15 Mon 16:57]
| Headline                                |    Time |
|-----------------------------------------+---------|
| *Total time*                            | *14:09* |
|-----------------------------------------+---------|
| Study this Function and its Partial...  |    0:08 |
| Probe Deeply Into A Number-Theoretic... |   14:01 |
#+END:

* DONE Study this Function and its Partial Implementation in C++
  CLOSED: [2018-10-08 Mon 12:42]
  :LOGBOOK:
  CLOCK: [2018-10-02 Tue 16:00]--[2018-10-02 Tue 16:08] =>  0:08
  :END:
#+BEGIN_EXAMPLE
   The function f : Z+  x  Z+ --> Z+, where f(m, n) = [(m + n - 2)(m + n - 1)/2] + m,
   is one-to-one and onto.

   A little experimentation with this function shows the pattern.

   f(1,1) =  1   f(2,1) =  3   f(3,1) =  6   f(4,1) = 10   f(5,1) = 15

   f(1,2) =  2   f(2,2) =  5   f(3,2) =  9   f(4,2) = 14   f(5,2) = 20

   f(1,3) =  4   f(2,3) =  8   f(3,3) = 13   f(4,3) = 19   f(5,3) = 26

   f(1,4) =  7   f(2,4) = 12   f(3,4) = 18   f(4,4) = 25

   f(1,5) = 11   f(2,5) = 17   f(3,5) = 24

   f(1,6) = 16   f(2,6) = 23

   f(1,7) = 22

   It should be clear that the range of values this function takes on
   for a fixed value of m + n, say m + n = x, is

   (x - 2)(x - 1)                (x - 2)(x - 1)
   --------------  + 1  through  -------------- + (x - 1)
          2                             2

   since m can assume the values 1, 2, 3,...,(x - 1) under these
   conditions, and the first term in the formula is a fixed positive
   integer when m + n is fixed.

   To show that this function is one-to-one and onto, we merely need
   to show that the range of values for x + 1 picks up precisely
   where the range of values for x left off, i.e., that

   f(x - 1, 1) + 1 = f(1, x)

                     (x - 2)(x - 1)
   f(x - 1, 1) + 1 = -------------- + (x - 1) + 1
                            2

                     x^2 - x + 2    (x - 1)x
                   = -----------  = --------  + 1  = f(1, x)
                         2             2
#+END_EXAMPLE

#+BEGIN_SRC C++ :results output :var global_y=23
  #include <cmath>
  #include <cstdlib>
  #include <iostream>
  using namespace std;

  int f(int m, int n)
  {
     int x = m + n;
     return (((x - 2) * (x - 1) / 2) + m);
  }

  void invert(int y, int& m, int& n)
  {
     int x = 8; // what should this assignment to x really be? 
     m = y - ((x-1)*(x-2)/2);
     n = x - m;
  }

  int main(int argc, char* argv[])
  {
     int y = (argc > 1) ? atoi(argv[1]) : global_y;

     int m = 0;
     int n = 0;
     invert(y, m, n);
     // check answer
     if (y == f(m, n))
     {
     cout << "m = " << m << ", n = " << n << endl;
     }
     return 0;
  }
#+END_SRC

#+RESULTS:
: m = 2, n = 6

  If correctly implemented, the output will be:
#+RESULTS:
: m = 2, n = 6

* DONE Probe Deeply Into A Number-Theoretic Conjecture
  CLOSED: [2018-10-08 Mon 12:55]
  :LOGBOOK:
  CLOCK: [2018-10-08 Mon 10:44]--[2018-10-08 Mon 12:44] =>  2:00
  CLOCK: [2018-10-07 Sun 16:44]--[2018-10-07 Sat 20:44] =>  4:00
  CLOCK: [2018-10-06 Sat 12:42]--[2018-10-06 Sat 20:43] =>  8:01
  :END:

  Let us define two infinite sets of positive integers, /A/ and /B/, to be
  generated based on two real numbers. The first is \( x = \sqrt{2} \), so \( A
  = \{\lfloor x \rfloor, \lfloor 2x \rfloor, \lfloor 3x \rfloor, \lfloor 4x
  \rfloor, \ldots \} \), more succinctly written as \( \{\lfloor nx \rfloor : n
  \in \mathbf{Z^{+}}\} \). /B/ is similarly defined, except with \( 2 + \sqrt{2}
  \) being the real number /x/. So in words, /A/ is the set of all floored
  positive integer multiples of the square root of two. /B/ is the set of all
  floored positive integer multiples of two plus the square root of two.

  You must grasp the meaning of this definition and demonstrate that you have
  achieved a solid understanding of it. To help achieve and explore that
  understanding, write an elisp program to calculate the two sets /A/ and /B/.
  As you examine your results, be on the lookout for any patterns, and formulate
  some kind of conjecture about these results. State your conjecture clearly and
  unambiguously, then try to /verify/ your conjecture for as many positive
  integers as you can.

  In the supplied sample code is an elisp program (=3x+1conjecture.el=) that
  verifies the so-called /3x + 1 conjecture/ for a given positive integer. When
  you examine this code, note the use of the calc package and how it enables
  working with /very large/ numbers.

(setq 
      length 3
      x (sqrt 2)
      start (floor (/ 1000000 (+ 2 (sqrt 2))))
      A (loop for y from start to (+ start length) collect (floor (* y x)))
      x (+ 2 (sqrt 2))
      B (loop for y from start to (+ start length) collect (floor (* y x))))

(defun verify-A-B (&optional numver start start2)
  (if (numberp numver)  nil                               (setq numver 1000))
  (if (= numver 0)      (and (print "Verified") (return)                nil))
  (if (numberp   start)                                  nil (setq start  1))
  (if (numberp  start2)                                  nil (setq start2 1))

  (setq x  (sqrt 2)
        xtwo (+ 2 (sqrt 2)))

  (while (< 0 numver)
    (cond 
      ((= (1+ (floor (* x     start))) (floor (* x    (1+  start)))) (verify-A-B (1- numver) (1+ start)      start2))
      ((= (1+ (floor (* x     start))) (floor (* xtwo      start2))) (verify-A-B (1- numver)      start      start2))
      ((= (1+ (floor (* xtwo start2))) (floor (* x          start))) (verify-A-B (1- numver)      start (1+ start2)))
    )
  )
)

(defun verify-A-B (&optional numver start start2)
  (if (numberp numver)   nil  (setq numver 1000))
  (if (numberp   start)  nil  (setq start  1))
  (if (numberp  start2)  nil  (setq start2 1))

  (setq x  (sqrt 2)
        xtwo (+ 2 (sqrt 2)))

  (while (< 0 numver)
    (cond 
      ((= (1+ (floor (* x      start))) (floor (* x    (1+  start)))) (setq start  (1+  start)                 ))
      ((= (1+ (floor (* xtwo  start2))) (floor (* x    (1+  start)))) (setq start2 (1+ start2) start (1+ start)))
      ((= (1+ (floor (* x      start))) (floor (* xtwo (1+ start2)))) (setq start  (1+  start)                 ))
      (t (and (print "Failed") (print start) (print start2) (return)))
    )
    (setq numver (1- numver))
  )

  (print "Verified")
  (print start)
  (print start2)
  (print (floor (* start     x)))
  (print (floor (* start2 xtwo)))
)

(defun get-next-A (n)
   (/ (+ (* n 141) (/ (+ (* n 421356) (/ (+ (* n 237309) (/ (+ (* n 504880) (/ (* n 168872) 1000000)) 1000000)) 1000000)) 1000000)) 100))
  
(defun get-next-B (n)
   (/ (+ (* n 341) (/ (+ (* n 421356) (/ (+ (* n 237309) (/ (+ (* n 504880) (/ (* n 168872) 1000000)) 1000000)) 1000000)) 1000000)) 100))

(defun verify-A-B (&optional numver start start2)
  (if (numberp numver)   nil  (setq numver 1000))
  (if (numberp   start)  nil  (setq start  1))
  (if (numberp  start2)  nil  (setq start2 1))

  (setq x   1.414213562373095048801688724209698078569671875376948073176679737990732478462107
        xtwo           (+ 2 x)
        ver (get-next-A start)
        numver  (+ ver numver)
        failed            nil)

  (while (and (< ver numver) (not failed))
    (cond 
      ((= (get-next-A  start) ver) (setq start  (1+  start)))
      ((= (get-next-B start2) ver) (setq start2 (1+ start2)))
      (t (setq failed t))
    )
    (if (not failed)
      (setq ver (1+ ver)))
  )

  (if (= ver numver) 
        (print "Verified")
        (print "Failed"))

  (print start)
  (print start2)
  (print (floor (* start     x)))
  (print (floor (* start2 xtwo)))
)

(setq time-passed (measure-time (verify-A-B 1000000000000 1 1)))


"Verified"

707106789

292893223

1000000011

1000000014
1503.2075889110565


"Verified"

707106782

292893219

1000000001

1000000000
1296.025752067566

(setq time-passed (measure-time (verify-A-B 1000 707106789 292893223)))

"Verified"

707107497

292893515

1000001012

1000001011
0.001993894577026367


A(414213 414214 414216 414217)
B(999999 1000002 1000006 1000009)

* CODE

A(1 2 4 5 7 8 9 11 12 14 15 16 18 19 21 22 24 25 26 28 29 31 32 33 35 36 38 39 41 42)
B(3 6 10 13 17 20 23 27 30 34 37 40 44 47 51 54 58 61 64 68 71 75 78 81 85 88 92 95 99 102)

#+BEGIN_SRC elisp :results silent :tangle verify-A-B.el
  (require 'cl)
  (require 'calc)

  (defmacro measure-time (&rest body)
  "Measure and return the running time of the code in body."
  (declare (indent defun))
  (let ((start (make-symbol "start")))
    `(let ((,start (float-time)))
        ,@body
        (- (float-time) ,start))))

  (setq sq2many  (math-read-number "141421356237309504880168872")
        sq22many (math-read-number "341421356237309504880168872")
        ten2many (math-read-number "100000000000000000000000000"))

  (defun get-next-A (a)
    (math-floor (math-quotient (math-mul a sq2many) ten2many)))

  (defun get-next-B (b)
    (math-floor (math-quotient (math-mul b sq22many) ten2many)))

;;  (defun get-next-A (n)
;;    (/ (+ (* n 141) (/ (+ (* n 421356) (/ (+ (* n 237309) (/ (+ (* n 504880) (/ (* n 168872) 1000000)) 1000000)) 1000000)) 1000000)) 100))
  
;;  (defun get-next-B (n)
;;    (/ (+ (* n 341) (/ (+ (* n 421356) (/ (+ (* n 237309) (/ (+ (* n 504880) (/ (* n 168872) 1000000)) 1000000)) 1000000)) 1000000)) 100))

  (defun verify-A-B (&optional numver start start2)
    (if (numberp numver)   nil  (setq numver 1000))
    (if (numberp   start)  nil  (setq start  1))
    (if (numberp  start2)  nil  (setq start2 1))

    (setq ver (get-next-A start)
          numver  (+ ver numver)
          failed            nil)

    (while (and (< ver numver) (not failed))
      (cond 
        ((= (get-next-A  start) ver) (setq start  (1+  start)))
        ((= (get-next-B start2) ver) (setq start2 (1+ start2)))
        (t (setq failed t))
      )
        (if (not failed)
          (setq ver (1+ ver)))
    )

    (if (= ver numver) 
      (print "Verified")
      (print "Failed"))

    (print start)
    (print start2)
    (print (get-next-A start))
    (print (get-next-B start2))
    (print ver)
  )

  (defun try-a-bunch ()
    (setq time-passed (measure-time (verify-A-B 4000000000 707106781187 292893218814)))
    (print time-passed))
#+END_SRC
(try-a-bunch)

"Verified"

707113852255

292896147746

1000010000000

1000010000001

1000010000000

174.68106365203857
174.68106365203857

(setq num (/ 1000000000000 4))
(while (< (get-next-B num) 1000000000000)
  (setq num (1+ num)))
num

* Other CODE

#+BEGIN_SRC elisp 
  (require 'cl)
  (require 'calc)

  (setq sq2many  (math-read-number "141421356237309504880168872")
      sq22many (math-read-number "341421356237309504880168872")
      ten2many (math-read-number "100000000000000000000000000"))

  (defun get-next-A (a)
    (math-floor (math-quotient (math-mul a sq2many) ten2many)))

  (defun get-next-B (b)
    (math-floor (math-quotient (math-mul b sq22many) ten2many)))

  (defun get-start-A (a)
    (math-floor (math-quotient (math-mul a ten2many) sq2many)))

  (defun find-A-B (n)
    (setq num (get-start-A n))
    (while (< (get-next-A num) n)
      (setq num (1+ num)))
    (setq num2 (- (1+ n) num))
    (if (> (get-next-A num) n) (setq num (1- num)))
    (list num num2))
#+END_SRC

(find-A-B 1140000000000)
(806101730553 333898269448)

#+RESULTS:
: find-A-B

#+BEGIN_SRC elisp

  (setq vars (loop for x from 1000000000000 to 1110000000000 by 5000000000
               collect (apply 'list x (find-A-B x))))

  (setq a-b-val (apply 'list (mapcar '(lambda (n) (list (get-next-A (second n)) (get-next-B (third n)))) vars)))
  (setq a-b (apply 'list (mapcar '(lambda (n) (list (second n) (third n))) vars)))

#+END_SRC

#+RESULTS:
| 707106781187 | 292893218814 |
| 710642315093 | 294357684908 |
| 714177848999 | 295822151002 |
| 717713382905 | 297286617096 |
| 721248916810 | 298751083190 |
| 724784450716 | 300215549284 |
| 728319984622 | 301680015378 |
| 731855518528 | 303144481472 |
| 735391052434 | 304608947566 |
| 738926586340 | 306073413661 |
| 742462120246 | 307537879755 |
| 745997654152 | 309002345849 |
| 749533188058 | 310466811943 |
| 753068721964 | 311931278037 |
| 756604255870 | 313395744131 |
| 760139789776 | 314860210225 |
| 763675323682 | 316324676319 |
| 767210857588 | 317789142413 |
| 770746391494 | 319253608507 |
| 774281925399 | 320718074601 |
| 777817459305 | 322182540695 |
| 781352993211 | 323647006789 |
| 784888527117 | 325111472883 |


|             x |            A |            B |
| 1000000000000 | 707106781187 | 292893218814 |
| 1005000000000 | 710642315093 | 294357684908 |
| 1010000000000 | 714177848999 | 295822151002 |
| 1015000000000 | 717713382905 | 297286617096 |
| 1020000000000 | 721248916810 | 298751083190 |
| 1025000000000 | 724784450716 | 300215549284 |
| 1030000000000 | 728319984622 | 301680015378 |
| 1035000000000 | 731855518528 | 303144481472 |
| 1040000000000 | 735391052434 | 304608947566 |
| 1045000000000 | 738926586340 | 306073413661 |
| 1050000000000 | 742462120246 | 307537879755 |
| 1055000000000 | 745997654152 | 309002345849 |
| 1060000000000 | 749533188058 | 310466811943 |
| 1065000000000 | 753068721964 | 311931278037 |
| 1070000000000 | 756604255870 | 313395744131 |
| 1075000000000 | 760139789776 | 314860210225 |
| 1080000000000 | 763675323682 | 316324676319 |
| 1085000000000 | 767210857588 | 317789142413 |
| 1090000000000 | 770746391494 | 319253608507 |
| 1095000000000 | 774281925399 | 320718074601 |
| 1100000000000 | 777817459305 | 322182540695 |
| 1105000000000 | 781352993211 | 323647006789 |
| 1110000000000 | 784888527117 | 325111472883 |


| 1000000000000 | 1000000000001 |
| 1005000000000 | 1005000000001 |
| 1010000000000 | 1010000000001 |
| 1015000000000 | 1015000000001 |
| 1019999999999 | 1020000000000 |
| 1024999999999 | 1025000000000 |
| 1029999999999 | 1030000000000 |
| 1034999999999 | 1035000000000 |
| 1039999999999 | 1040000000000 |
| 1045000000000 | 1045000000003 |
| 1050000000000 | 1050000000002 |
| 1055000000000 | 1055000000002 |
| 1060000000000 | 1060000000002 |
| 1065000000000 | 1065000000002 |
| 1070000000000 | 1070000000002 |
| 1075000000000 | 1075000000001 |
| 1080000000000 | 1080000000001 |
| 1085000000000 | 1085000000001 |
| 1090000000000 | 1090000000001 |
| 1094999999999 | 1095000000000 |
| 1099999999999 | 1100000000000 |
| 1104999999999 | 1105000000000 |
| 1109999999999 | 1110000000000 |


(mapcar* '(lambda (ab) (verify-A-B 100 (car ab) (cadr ab))) a-b)

:VerifiedNumbers:
"Verified"

707106781258

292893218843

1000000000101

1000000000100

1000000000100

"Verified"

710642315164

294357684937

1005000000101

1005000000100

1005000000100

"Verified"

714177849070

295822151031

1010000000101

1010000000100

1010000000100

"Verified"

717713382976

297286617125

1015000000101

1015000000100

1015000000100

"Verified"

721248916881

298751083219

1020000000100

1020000000099

1020000000099

"Verified"

724784450787

300215549313

1025000000100

1025000000099

1025000000099

"Verified"

728319984693

301680015407

1030000000100

1030000000099

1030000000099

"Verified"

731855518599

303144481501

1035000000100

1035000000099

1035000000099

"Verified"

735391052505

304608947595

1040000000100

1040000000099

1040000000099

"Verified"

738926586411

306073413690

1045000000100

1045000000102

1045000000100

"Verified"

742462120317

307537879784

1050000000100

1050000000101

1050000000100

"Verified"

745997654223

309002345878

1055000000100

1055000000101

1055000000100

"Verified"

749533188129

310466811972

1060000000100

1060000000101

1060000000100

"Verified"

753068722035

311931278066

1065000000100

1065000000101

1065000000100

"Verified"

756604255941

313395744160

1070000000100

1070000000101

1070000000100

"Verified"

760139789847

314860210254

1075000000101

1075000000100

1075000000100

"Verified"

763675323753

316324676348

1080000000101

1080000000100

1080000000100

"Verified"

767210857659

317789142442

1085000000101

1085000000100

1085000000100

"Verified"

770746391565

319253608536

1090000000101

1090000000100

1090000000100

"Verified"

774281925470

320718074630

1095000000100

1095000000099

1095000000099

"Verified"

777817459376

322182540724

1100000000100

1100000000099

1100000000099

"Verified"

781352993282

323647006818

1105000000100

1105000000099

1105000000099

"Verified"

784888527188

325111472912

1110000000100

1110000000099

1110000000099
:END:

#+RESULTS:
: 0.004408597946166992

* Sample Code

#+BEGIN_SRC elisp :results silent :tangle 3x+1conjecture.el
  (require 'calc)

  (defmath is-odd (num)
    (= (logand num 1) 1))

  (defmath 3x+1 (num)
    (if (is-odd num)
        (1+ (* 3 num))
      (/ num 2)))

  (defmath transform-3x+1 (num)
    (while (> num 1)
      (setq num (3x+1 num)))
    num)

  (defun test-3x+1-conjecture (max-num)
    (loop for n from 2 to max-num
          unless (= 1 (calcFunc-transform-3x+1 n))
          collect n))

  (defmacro measure-time (&rest body)
    "Measure and return the running time of the code in body."
    (declare (indent defun))
    (let ((start (make-symbol "start")))
      `(let ((,start (float-time)))
         ,@body
         (- (float-time) ,start))))
#+END_SRC

#+BEGIN_SRC elisp
  (require 'calc-math)
  (calcFunc-is-odd (math-read-number "3589723987598273598723958729385792875982735982759871"))
#+END_SRC

#+BEGIN_SRC elisp
  (vector (measure-time (setq results (test-3x+1-conjecture 1000000))) results)
#+END_SRC

#+RESULTS:
: [253.0801601409912 nil]

* Expectations
  *How to Earn Your Grade*

  1. Supply the correct missing expression in the assignment of /x/ in the
     /invert/ function.
  2. Get the supplied 3x+1conjecture.el code to “tangle” 
     (see [[http://orgmode.org/guide/Working-With-Source-Code.html]]).
  3. Learn how to run emacs in \ldquo{}batch mode\rdquo. 
  4. Load the supplied code and run it in batch mode.
  5. Report on how long it took to run the =test-3x+1-conjecture= function.
  6. Formulate the set-theoretic conjecture in \ldquo{}set proposition\rdquo form.
     Be sure to state your conjecture *clearly* and *unambiguously* (using
     no more than 20 symbols).
  7. Show that you grasp the meaning of and demonstrate that you have
     achieved a solid understanding of this conjecture.
  8. Using your experience with the /calc-math/ package, write elisp code
     to /verify/ the set-theoretic conjecture. This requires attacking
     the problem using /integers/ --- *not* /reals/.
  9. With a time/computation budget of 24 hours (in a row), report on
     how many 13-digit numbers (in the trillions) you can verify.
  10. Do the \ldquo{}What Is True?\rdquo self-assessment.
* What Is True?
  This is a tool that allows you to quantify how engaged (interested,
  focused, enthusiastic) you feel you were while doing this assignment.

  Use this scale to score your agreement with the assertions in the function below
  that uses a string as the first element, and a number 0-5 as the second element
  of each vector in this vector of vectors:

  | 5 | = | complete or total agreement   |
  | 4 | = | not quite total agreement     |
  | 3 | = | middling agreement            |
  | 2 | = | some agreement                |
  | 1 | = | piddling agreement            |
  | 0 | = | none, no agreement whatsoever |

** My Report
   With others we were able to verify 97,596,850,000 numbers in the trillions

   I was able to solve the invert function by working with my friends.
   The promlem was solved by incrementing x until it was found.


#+BEGIN_SRC elisp :results silent :tangle yes
    (defun what-is-true-about-my-engagement-with-dm2-assignment-03.4 ()
      (vector
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; What is true of my experience in general?                              ;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    ["I had fun." 5]
    ["I collaborated with one or more classmates." 5]
    ["I learned something new." 5]
    ["I achieved something meaningful, or something I can build upon at a later time." 5]

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; What is true of my report on what I learned?                            ;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    ["I reported on how I attacked and solved the problem of the invert function." 5]
    ["I reported on how many 13-digit numbers I was able to verify." 5]

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; What is true about the correctness and completeness of my code?         ;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    ["It is verified by showing no output except that which would report a failure to satisfy a correct conjecture." 5]
    ["It uses bigpos arithmetic via the 'calc' package." 5]
    ["It does NOT use any floating-point arithmetic." 5]
    ["It can correctly keep running for 24 consecutive hours without running out of memory." 5]
    ["It can correctly keep running under emacs in batch mode in the background, as discussed in class." 5]

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; What is true about the elegance of my code?                             ;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    ["It has some by virtue of its correctness, as first and foremost, an elegant solution is a correct solution." 4]
    ["It increases by means of helper functions that increase cohesion, and decrease complexity." 5]
    ["It increases by having no unnecessary, redundant functionality." 5]
    ["It increases by using data types/structures as efficiently as possible." 5]
    ["My code has only function definitions (defuns) in it, NO function calls or other expressions." 5]
    ["The last function in my code is my 'main' test driver function defined as discussed in class." 5]

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; What is true of the depth of my engagement with this assignment?        ;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    ["I found and grasped a clear, unambiguous statement of the set-theoretic conjecture." 5]
    ["I succeeded in verifying this conjecture for many, many 13-digit integers." 4]
    ["I went deeper by seeking for an approach to a proof." 5]
    ["I went deeper by getting close, but not quite to the end." 5]
    ["I went deeper by getting all the way to the end, and clinching the proof." 5]
    ["I went still deeper by exploring AND reporting on possible applications of the ideas I discovered." 0]
  ))
#+END_SRC
