#+TITLE: DM2 Assignment 08.3
#+LANGUAGE: en
#+OPTIONS: H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t
#+OPTIONS: html-postamble:nil
#+STARTUP: showeverything entitiespretty
#+SETUPFILE: theme-bigblow.setup

[[elisp:(find-file-other-window%20"generic-instructions.org")][Read Instructions]]
[[elisp:(progn%20(save-buffer)%20(browse-url-of-file%20(org-html-export-to-html)))][Export to HTML and Browse]]
[[elisp:(progn%20(save-buffer)%20(org-clock-report%201)%20(save-buffer))][Insert/Update Clock Summary Report]]

* DONE Use the Designated RSA Players
  CLOSED: [2018-11-19 Mon 15:29]
  :LOGBOOK:
  CLOCK: [2018-11-19 Mon 14:29]--[2018-11-19 Mon 15:29] =>  1:00
  :END:
  First, reread (review) section TWO subsection PQR and recall the eight RSA
  players and their roles/relationships (summarized below):

  | Who | What                    | Roles/Relationships                                                 |
  |-----+-------------------------+---------------------------------------------------------------------|
  | m   | message (plaintext)     | decrypted c        m = c^d%n  (pow-mod c d n)                        |
  | c   | ciphertext              | encrypted m        c = m^e%n  (pow-mod m e n)                        |
  | p   | a large prime           | where "large" is relative                                           |
  | q   | another large prime     | different than p, but with the same number of digits (more or less) |
  | n   | the modulus             | the product of p and q: must be bigger than m                       |
  | t   | the totient             | the product of p - 1 and q - 1: (* (1- p) (1- q))                   |
  | e   | the encryption exponent | must be coprime to t: gcd(e, t) = 1, typically 65537 (2^16 + 1)      |
  | d   | the decryption exponent | TUMMI of e (mod t)                                                  |

  For modular exponentiation (pow-mod), see below. As for the totient, this
  function counts the number of totatives of a given number. A totative of n is
  a number smaller than n that is coprime to n. The totient is a multiplicative
  function, meaning that the totient of a product is the product of the totients
  of the factors: totient(pq) = totient(p) * totient(q). The totient of any
  prime is that prime minus one.

  In the source block below are encoded private and public keys, and the
  corresponding primes and exponents, all together dubbed \ldquo{}the designated RSA
  players\rdquo. Your task is to figure out how to extract these numbers from that
  file, produced by tangling, and use them for the following task.

#+BEGIN_SRC sh :tangle id_rsa
-----BEGIN RSA PRIVATE KEY-----
MIIEogIBAAKCAQEAzU6g/of54RvchTm5Qq0ec9Ve/BYikcYbsdvNk8/FFzhOicQ6
BseSOuvgbnuLxcJVW5gWgpOWqlu/tMOESquIoPbdnI1joIaVnDRfzzj5ZABuncnM
joU8FrD73q03LQILT6MgQBQKAY1BZnnfDikUe2cQXY/ZddVz2EexNejAd/qr1XlV
IPOPvZt5Irj23a366Hz/J0tbPmzdEeYZGJCDW4qPqG73Z4CKv+AN4K5vMNI2uRnJ
RXlvCGgNs2KM8WCDelzL0MNwEfIbxIjigA+zZ4AsHsfdGc4l9ukiytd463wscaPz
l2/A1g7rBd2jSDoN+FqgNQTDQKwRLGz76cLsTwIDAQABAoIBAAon+5rbyyaxpCUL
B/kea0U7puk9hxRDApe30eGgA5X0eR4jkONI+BjmFkIg5ncv990CFwr6lhdzVnZw
vZicB7Q+whO+gtEsFzaU+LBdlyi1RMOVegMK4EAXHT6UvwgA8+JKpYvF8gDFphiV
qs0ehx7bqFmYhh9oIcTvNvr9upe0vgN69jvTjrlnZRZ5LJazgtCPuShq0Y0cl3fi
u3idx3NzqMRLz5LJo6Os8QI7b2IhG4UhAuDAZimSxNGtWPIPGpeMqGrVDof+Ss7J
I4hS3V5gFIrIk+QuMa+r51kDVl+4EKqOCUDLEaG8kzttCRGampYZZs3D9bRnD51P
+Z7yJeECgYEA/XOnrI15kviSSyZRMxIU0B4f75nyiU+1Cch9ktF3ElIOMhz+FoGO
rQcqq5OV2qJqzO4+ixII1MdDNI0k4rdFVX0caXB6WXGBMxHE2zBxQzP6ixUAaWcG
JZA0QFUYMCtJ5NT/PxKW4LR9MaazgfZ6VEWw3+/DX5EXu7X/TNlkNskCgYEAz18O
pBeFKB+tOighZ0KCdr9sj03csRbR/tZDdmDmlWvJaqf66szlg5lkoRBCTa5spwyr
jGTFLesocxfbOiVBgSpR6rUiSd7B3MTGDnXOUISVCJH7W1FVW2C828Euq9h7hwy3
WxEPpIdqe05nNXvIjeWEQEHg8A31nZsZl8ai3lcCgYBNTLzS78MohA96RBF31gfr
AYUT+ovyPREmDrPd12zNdaFGv3jvPExbkVf+RGDr8aVJI1CH8dQnsS5aFMIvM14+
GI5VyixGo0uYW88CWt/wcyXyzVD21KkXQ8fr5wgdiNZcqGnAvtatad7VCdatyJK+
qRKs+d9IgmQOqA9ZTOQ3oQKBgB+PQfUrNzKyD3UIYn0KnDxiSa1NlkbFSFRWW5IK
kU0wSEkZI5DUeiGbGLuCc/TKlPKfdQQ62d9xKIjLmquwu9VikXD8/Cjt4+crc1EE
ENAkPWI+hViSekEb6eIv9mBk4/fbsZQEdrL9gPEfL4nuOsmNoqD85bTjCvxffHei
3WqlAoGAPkZAcTwNY6Yo5XdTFzh355ekB6SX+MFAQOOU+evYcPBhxS5Zk3SqkbaW
ENIxtkNfhpcb7H5ZGvegKyNrXj2cVg4B9q1KRakqt57Hl48dkntp/FsB8LHxXUm2
JSh2OHzk62JR/F7mlFk99QaSgHpImS4+To4mzYnqdyk1cOneVic=
-----END RSA PRIVATE KEY-----
#+END_SRC

:BEGIN_DECRYPT:
Private-Key: (2048 bit)
modulus:
    00:cd:4e:a0:fe:87:f9:e1:1b:dc:85:39:b9:42:ad:
    1e:73:d5:5e:fc:16:22:91:c6:1b:b1:db:cd:93:cf:
    c5:17:38:4e:89:c4:3a:06:c7:92:3a:eb:e0:6e:7b:
    8b:c5:c2:55:5b:98:16:82:93:96:aa:5b:bf:b4:c3:
    84:4a:ab:88:a0:f6:dd:9c:8d:63:a0:86:95:9c:34:
    5f:cf:38:f9:64:00:6e:9d:c9:cc:8e:85:3c:16:b0:
    fb:de:ad:37:2d:02:0b:4f:a3:20:40:14:0a:01:8d:
    41:66:79:df:0e:29:14:7b:67:10:5d:8f:d9:75:d5:
    73:d8:47:b1:35:e8:c0:77:fa:ab:d5:79:55:20:f3:
    8f:bd:9b:79:22:b8:f6:dd:ad:fa:e8:7c:ff:27:4b:
    5b:3e:6c:dd:11:e6:19:18:90:83:5b:8a:8f:a8:6e:
    f7:67:80:8a:bf:e0:0d:e0:ae:6f:30:d2:36:b9:19:
    c9:45:79:6f:08:68:0d:b3:62:8c:f1:60:83:7a:5c:
    cb:d0:c3:70:11:f2:1b:c4:88:e2:80:0f:b3:67:80:
    2c:1e:c7:dd:19:ce:25:f6:e9:22:ca:d7:78:eb:7c:
    2c:71:a3:f3:97:6f:c0:d6:0e:eb:05:dd:a3:48:3a:
    0d:f8:5a:a0:35:04:c3:40:ac:11:2c:6c:fb:e9:c2:
    ec:4f
publicExponent: 65537 (0x10001)
privateExponent:
    0a:27:fb:9a:db:cb:26:b1:a4:25:0b:07:f9:1e:6b:
    45:3b:a6:e9:3d:87:14:43:02:97:b7:d1:e1:a0:03:
    95:f4:79:1e:23:90:e3:48:f8:18:e6:16:42:20:e6:
    77:2f:f7:dd:02:17:0a:fa:96:17:73:56:76:70:bd:
    98:9c:07:b4:3e:c2:13:be:82:d1:2c:17:36:94:f8:
    b0:5d:97:28:b5:44:c3:95:7a:03:0a:e0:40:17:1d:
    3e:94:bf:08:00:f3:e2:4a:a5:8b:c5:f2:00:c5:a6:
    18:95:aa:cd:1e:87:1e:db:a8:59:98:86:1f:68:21:
    c4:ef:36:fa:fd:ba:97:b4:be:03:7a:f6:3b:d3:8e:
    b9:67:65:16:79:2c:96:b3:82:d0:8f:b9:28:6a:d1:
    8d:1c:97:77:e2:bb:78:9d:c7:73:73:a8:c4:4b:cf:
    92:c9:a3:a3:ac:f1:02:3b:6f:62:21:1b:85:21:02:
    e0:c0:66:29:92:c4:d1:ad:58:f2:0f:1a:97:8c:a8:
    6a:d5:0e:87:fe:4a:ce:c9:23:88:52:dd:5e:60:14:
    8a:c8:93:e4:2e:31:af:ab:e7:59:03:56:5f:b8:10:
    aa:8e:09:40:cb:11:a1:bc:93:3b:6d:09:11:9a:9a:
    96:19:66:cd:c3:f5:b4:67:0f:9d:4f:f9:9e:f2:25:
    e1
prime1:
    00:fd:73:a7:ac:8d:79:92:f8:92:4b:26:51:33:12:
    14:d0:1e:1f:ef:99:f2:89:4f:b5:09:c8:7d:92:d1:
    77:12:52:0e:32:1c:fe:16:81:8e:ad:07:2a:ab:93:
    95:da:a2:6a:cc:ee:3e:8b:12:08:d4:c7:43:34:8d:
    24:e2:b7:45:55:7d:1c:69:70:7a:59:71:81:33:11:
    c4:db:30:71:43:33:fa:8b:15:00:69:67:06:25:90:
    34:40:55:18:30:2b:49:e4:d4:ff:3f:12:96:e0:b4:
    7d:31:a6:b3:81:f6:7a:54:45:b0:df:ef:c3:5f:91:
    17:bb:b5:ff:4c:d9:64:36:c9
prime2:
    00:cf:5f:0e:a4:17:85:28:1f:ad:3a:28:21:67:42:
    82:76:bf:6c:8f:4d:dc:b1:16:d1:fe:d6:43:76:60:
    e6:95:6b:c9:6a:a7:fa:ea:cc:e5:83:99:64:a1:10:
    42:4d:ae:6c:a7:0c:ab:8c:64:c5:2d:eb:28:73:17:
    db:3a:25:41:81:2a:51:ea:b5:22:49:de:c1:dc:c4:
    c6:0e:75:ce:50:84:95:08:91:fb:5b:51:55:5b:60:
    bc:db:c1:2e:ab:d8:7b:87:0c:b7:5b:11:0f:a4:87:
    6a:7b:4e:67:35:7b:c8:8d:e5:84:40:41:e0:f0:0d:
    f5:9d:9b:19:97:c6:a2:de:57
exponent1:
    4d:4c:bc:d2:ef:c3:28:84:0f:7a:44:11:77:d6:07:
    eb:01:85:13:fa:8b:f2:3d:11:26:0e:b3:dd:d7:6c:
    cd:75:a1:46:bf:78:ef:3c:4c:5b:91:57:fe:44:60:
    eb:f1:a5:49:23:50:87:f1:d4:27:b1:2e:5a:14:c2:
    2f:33:5e:3e:18:8e:55:ca:2c:46:a3:4b:98:5b:cf:
    02:5a:df:f0:73:25:f2:cd:50:f6:d4:a9:17:43:c7:
    eb:e7:08:1d:88:d6:5c:a8:69:c0:be:d6:ad:69:de:
    d5:09:d6:ad:c8:92:be:a9:12:ac:f9:df:48:82:64:
    0e:a8:0f:59:4c:e4:37:a1
exponent2:
    1f:8f:41:f5:2b:37:32:b2:0f:75:08:62:7d:0a:9c:
    3c:62:49:ad:4d:96:46:c5:48:54:56:5b:92:0a:91:
    4d:30:48:49:19:23:90:d4:7a:21:9b:18:bb:82:73:
    f4:ca:94:f2:9f:75:04:3a:d9:df:71:28:88:cb:9a:
    ab:b0:bb:d5:62:91:70:fc:fc:28:ed:e3:e7:2b:73:
    51:04:10:d0:24:3d:62:3e:85:58:92:7a:41:1b:e9:
    e2:2f:f6:60:64:e3:f7:db:b1:94:04:76:b2:fd:80:
    f1:1f:2f:89:ee:3a:c9:8d:a2:a0:fc:e5:b4:e3:0a:
    fc:5f:7c:77:a2:dd:6a:a5
coefficient:
    3e:46:40:71:3c:0d:63:a6:28:e5:77:53:17:38:77:
    e7:97:a4:07:a4:97:f8:c1:40:40:e3:94:f9:eb:d8:
    70:f0:61:c5:2e:59:93:74:aa:91:b6:96:10:d2:31:
    b6:43:5f:86:97:1b:ec:7e:59:1a:f7:a0:2b:23:6b:
    5e:3d:9c:56:0e:01:f6:ad:4a:45:a9:2a:b7:9e:c7:
    97:8f:1d:92:7b:69:fc:5b:01:f0:b1:f1:5d:49:b6:
    25:28:76:38:7c:e4:eb:62:51:fc:5e:e6:94:59:3d:
    f5:06:92:80:7a:48:99:2e:3e:4e:8e:26:cd:89:ea:
    77:29:35:70:e9:de:56:27
:END:

:CONVERTED_FROM_HEX:
Modulus:
   25917625865764614624507472751051103464428082986161080917325091381217018533586661301320669088349902902177733085775047172358486320715824906656398649217984618175709283947623838618438741621369178069406446397074531354687624880196917763646414868349698726051879996914421772243243204533332912677707592777579924307583300353717924471535363990028443240100883027021565162972138614363715385332043557983711232731557512311123057439497171145626527059340721442610742860541066026291672440695589372721662512134639537223476118733688390730619624279959344239164602032337463835460472300522928416214570267590796482170746195043253636122733647
Public Exponent:
   65537
Private Exponent:
   1282099318809357776716255346734023184333671743307356521262309020216146208796373894729414058996145463003497423807661365835882213890790001791050008709045365703734523987338396398995657420029584437813993610011377247232819321323808038050897615136330977460979217083427001321583143401392576756658498493750310734473412127994427246550627780142546002138546655543230546395502748472358091575440470145662211341028173724375798216436973128946136871189307605154819611405020453473033745994199655405599844873798447330929315593290467099660955817434589553928138613543786824912448451851412687420728126959767482757051304538388727023674849
Prime 1:
   177979890619473945197204479753610471412080471556695548170777130366743840076039502662876748076963100473304963352590545433016597654993502523750394723485226239613519787056873595194902850137382499662419928837003477175462658073618318069595209725376131494946301812427316858866682753117975608975871345623801742505673
Prime 2:
   145621091099427821970355196426414899695448605313736047637292312641594120085318624088348378001393944019065335296367166589879330552584041557870666727258326498014315349660563186678271377614788059065223777868863406904969330950903096977665577757319923494479055778350175391403999223156138440588539141065367091338839

#+BEGIN_SRC elisp :results silent
  (require 'calc)
  (setf (get 'rsa-players :n) (math-read-number "25917625865764614624507472751051103464428082986161080917325091381217018533586661301320669088349902902177733085775047172358486320715824906656398649217984618175709283947623838618438741621369178069406446397074531354687624880196917763646414868349698726051879996914421772243243204533332912677707592777579924307583300353717924471535363990028443240100883027021565162972138614363715385332043557983711232731557512311123057439497171145626527059340721442610742860541066026291672440695589372721662512134639537223476118733688390730619624279959344239164602032337463835460472300522928416214570267590796482170746195043253636122733647"))
  (setf (get 'rsa-players :e) (math-read-number "65537"))
  (setf (get 'rsa-players :d) (math-read-number "1282099318809357776716255346734023184333671743307356521262309020216146208796373894729414058996145463003497423807661365835882213890790001791050008709045365703734523987338396398995657420029584437813993610011377247232819321323808038050897615136330977460979217083427001321583143401392576756658498493750310734473412127994427246550627780142546002138546655543230546395502748472358091575440470145662211341028173724375798216436973128946136871189307605154819611405020453473033745994199655405599844873798447330929315593290467099660955817434589553928138613543786824912448451851412687420728126959767482757051304538388727023674849"))
#+END_SRC
:END:

* DONE Test The Limits of the Code Supplied in XGG
  CLOSED: [2018-11-19 Mon 16:01]
  :LOGBOOK:
  CLOCK: [2018-11-19 Mon 16:01]--[2018-11-19 Mon 16:01] =>  0:00
  :END:
  Specifically, answer the question: What is the longest message that is a
  substring of the title page of the Book of Mormon (see below) that you can
  successfully encrypt and then decrypt again with the designated RSA players
  and the supplied code?

#+BEGIN_SRC elisp :results silent
  (require 'calc-math)
  (setf (get 'rsa-players :n) (math-read-number "25917625865764614624507472751051103464428082986161080917325091381217018533586661301320669088349902902177733085775047172358486320715824906656398649217984618175709283947623838618438741621369178069406446397074531354687624880196917763646414868349698726051879996914421772243243204533332912677707592777579924307583300353717924471535363990028443240100883027021565162972138614363715385332043557983711232731557512311123057439497171145626527059340721442610742860541066026291672440695589372721662512134639537223476118733688390730619624279959344239164602032337463835460472300522928416214570267590796482170746195043253636122733647"))
  (setf (get 'rsa-players :e) 65537)
  (setf (get 'rsa-players :d) (math-read-number "1282099318809357776716255346734023184333671743307356521262309020216146208796373894729414058996145463003497423807661365835882213890790001791050008709045365703734523987338396398995657420029584437813993610011377247232819321323808038050897615136330977460979217083427001321583143401392576756658498493750310734473412127994427246550627780142546002138546655543230546395502748472358091575440470145662211341028173724375798216436973128946136871189307605154819611405020453473033745994199655405599844873798447330929315593290467099660955817434589553928138613543786824912448451851412687420728126959767482757051304538388727023674849"))

  (defun pow-mod (base exponent modulus)
     (let ((calc-display-working-message nil))
        (math-pow-mod base exponent modulus)))

  (defun rsa-encrypt (message n e &optional encoder)
    (let* ((message-encoded (funcall (or encoder 'identity) message))
           (encrypted (pow-mod message-encoded e n)))
      encrypted))

  (defun rsa-decrypt (encrypted n d &optional decoder)
    (let* ((decrypted (pow-mod encrypted d n))
           (message-decoded (funcall (or decoder 'identity) decrypted)))
      message-decoded))

  (defun round-trip (message n e d &optional encoder &optional decoder)
    (equal message (rsa-decrypt (rsa-encrypt message n e encoder) n d decoder)))

  (defun test-rsa (message-with-spaces)
    (let* ((message (string-join (split-string message-with-spaces " ") "@"))
           (n (get 'rsa-players :n))
           (e (get 'rsa-players :e))
           (d (get 'rsa-players :d))
           (encrypted (rsa-encrypt message n e 'from-base-27))
           (decrypted (rsa-decrypt encrypted n d 'to-base-27))
           (decrypted-message-with-spaces (string-join (split-string decrypted "@") " "))
           (success (string= message-with-spaces decrypted-message-with-spaces)))
      (princ (format "\"%s\"\nwas encoded and encrypted as\n%s\nthen decrypted and decoded as\n\"%s\"\n"
                     message-with-spaces (math-format-number encrypted) decrypted-message-with-spaces))
      (princ (if success "" "un"))
      (princ "successfully.\n")
      success))

#+END_SRC

  In order to interface correctly with the above supplied code, you will of
  course need to learn (or refresh your knowledge) about and appropriately use
  *lisp symbol property lists*.

  The below supplied code implements a base-27 encoder and decoder (question:
  What does abr stand for?):

#+BEGIN_SRC elisp :results silent
  (defalias 'calcFunc-append 'append)

  (defmath abr (n b)
    (let* ((n (if (stringp n) (read-number n) n))
           (d (quotient n b))
           (m (% n b)))
      (if (zerop d)
          (list m)
        (append (abr d b) (list m)))))

  (defmath reconstruct-number-from-abr (list-of-coefficients base)
    (if (null list-of-coefficients)
        0
      (+ (car list-of-coefficients)
         (* base (reconstruct-number-from-abr (cdr list-of-coefficients) base)))))

  (defun to-base-27 (number-string)
    (mapconcat (lambda (n) (char-to-string (+ ?@ n))) (calcFunc-abr number-string 27) ""))

  (defun from-base-27 (message)
    (calcFunc-reconstruct-number-from-abr (reverse (mapcar (lambda (n) (- n ?@)) message)) 27))
#+END_SRC

  Replace with their correct values the 0 and 100 in the :var bindings for start
  and end indices:

#+BEGIN_SRC elisp :results output :var start=2 end=433
  (let* ((max-specpdl-size most-positive-fixnum)
         (max-lisp-eval-depth most-positive-fixnum)
         (title-page "THE BOOK OF MORMON AN ACCOUNT WRITTEN BY THE HAND OF MORMON UPON PLATES TAKEN FROM THE PLATES OF NEPHI WHEREFORE IT IS AN ABRIDGMENT OF THE RECORD OF THE PEOPLE OF NEPHI AND ALSO OF THE LAMANITES WRITTEN TO THE LAMANITES WHO ARE A REMNANT OF THE HOUSE OF ISRAEL AND ALSO TO JEW AND GENTILE WRITTEN BY WAY OF COMMANDMENT AND ALSO BY THE SPIRIT OF PROPHECY AND OF REVELATION WRITTEN AND SEALED UP AND HID UP UNTO THE LORD THAT THEY MIGHT NOT BE DESTROYED TO COME FORTH BY THE GIFT AND POWER OF GOD UNTO THE INTERPRETATION THEREOF SEALED BY THE HAND OF MORONI AND HID UP UNTO THE LORD TO COME FORTH IN DUE TIME BY WAY OF THE GENTILE THE INTERPRETATION THEREOF BY THE GIFT OF GOD AN ABRIDGMENT TAKEN FROM THE BOOK OF ETHER ALSO WHICH IS A RECORD OF THE PEOPLE OF JARED WHO WERE SCATTERED AT THE TIME THE LORD CONFOUNDED THE LANGUAGE OF THE PEOPLE WHEN THEY WERE BUILDING A TOWER TO GET TO HEAVEN WHICH IS TO SHOW UNTO THE REMNANT OF THE HOUSE OF ISRAEL WHAT GREAT THINGS THE LORD HATH DONE FOR THEIR FATHERS AND THAT THEY MAY KNOW THE COVENANTS OF THE LORD THAT THEY ARE NOT CAST OFF FOREVER AND ALSO TO THE CONVINCING OF THE JEW AND GENTILE THAT JESUS IS THE CHRIST THE ETERNAL GOD MANIFESTING HIMSELF UNTO ALL NATIONS AND NOW IF THERE ARE FAULTS THEY ARE THE MISTAKES OF MEN WHEREFORE CONDEMN NOT THE THINGS OF GOD THAT YE MAY BE FOUND SPOTLESS AT THE JUDGMENT SEAT OF CHRIST")
         (message (subseq title-page start end))) 
    (test-rsa message)) 
#+END_SRC

#+RESULTS:
: "E BOOK OF MORMON AN ACCOUNT WRITTEN BY THE HAND OF MORMON UPON PLATES TAKEN FROM THE PLATES OF NEPHI WHEREFORE IT IS AN ABRIDGMENT OF THE RECORD OF THE PEOPLE OF NEPHI AND ALSO OF THE LAMANITES WRITTEN TO THE LAMANITES WHO ARE A REMNANT OF THE HOUSE OF ISRAEL AND ALSO TO JEW AND GENTILE WRITTEN BY WAY OF COMMANDMENT AND ALSO BY THE SPIRIT OF PROPHECY AND OF REVELATION WRITTEN AND SEALED UP AND HID UP UNTO THE LORD THAT THEY MIG"
: was encoded and encrypted as
: 4947016679474457168706927622897826358832323016968543300038701672398250652559078647120877226491409966897197557157147030050996977522944490005899222971537884398012148318562461098726847326885792925845057608108578511417721146207849763488582840807600506488779303104351036774832561131953258852713318523823607605992491703248160211815644444963646600290542394619437514069765329314875569935130863995333390217545950658674307847488046446978540359018164765757584298536152863937161944770297386397496723680064874331064719732150066365004310517443419105667872416884868407647945324029671144814210148034282278409449376348977729753600817
: then decrypted and decoded as
: "E BOOK OF MORMON AN ACCOUNT WRITTEN BY THE HAND OF MORMON UPON PLATES TAKEN FROM THE PLATES OF NEPHI WHEREFORE IT IS AN ABRIDGMENT OF THE RECORD OF THE PEOPLE OF NEPHI AND ALSO OF THE LAMANITES WRITTEN TO THE LAMANITES WHO ARE A REMNANT OF THE HOUSE OF ISRAEL AND ALSO TO JEW AND GENTILE WRITTEN BY WAY OF COMMANDMENT AND ALSO BY THE SPIRIT OF PROPHECY AND OF REVELATION WRITTEN AND SEALED UP AND HID UP UNTO THE LORD THAT THEY MIG"
: successfully.
