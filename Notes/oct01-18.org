








(pttc)
| in1 | in2 | in3 | out |
|-----+-----+-----+-----|
|   0 |   0 |   0 |     |
|   0 |   0 |   1 |     |
|   0 |   1 |   0 |     |
|   0 |   1 |   1 |     |
|   1 |   0 |   0 |     |
|   1 |   0 |   1 |     |
|   1 |   1 |   0 |     |
|   1 |   1 |   1 |     |

(print-table '((a b c) (-) (3 4 5) (6 2 4) (5 7 8)))
| a | b | c |
|---+---+---|
| 3 | 4 | 5 |
| 6 | 2 | 4 |
| 5 | 7 | 8 |


(truth-table-create 4)
((0 0 0 0) (0 0 0 1) (0 0 1 0) (0 0 1 1) (0 1 0 0) (0 1 0 1) (0 1 1 0) (0 1 1 1) (1 0 0 0) (1 0 0 1) (1 0 1 0) (1 0 1 1) (1 1 0 0) (1 1 0 1) (1 1 1 0) (1 1 1 1))

(print-table (truth-table-create 4))
| 0 | 0 | 0 | 0 |
| 0 | 0 | 0 | 1 |
| 0 | 0 | 1 | 0 |
| 0 | 0 | 1 | 1 |
| 0 | 1 | 0 | 0 |
| 0 | 1 | 0 | 1 |
| 0 | 1 | 1 | 0 |
| 0 | 1 | 1 | 1 |
| 1 | 0 | 0 | 0 |
| 1 | 0 | 0 | 1 |
| 1 | 0 | 1 | 0 |
| 1 | 0 | 1 | 1 |
| 1 | 1 | 0 | 0 |
| 1 | 1 | 0 | 1 |
| 1 | 1 | 1 | 0 |
| 1 | 1 | 1 | 1 |

(pttc 3)
| 0 | 0 | 0 |
| 0 | 0 | 1 |
| 0 | 1 | 0 |
| 0 | 1 | 1 |
| 1 | 0 | 0 |
| 1 | 0 | 1 |
| 1 | 1 | 0 |
| 1 | 1 | 1 |

(pttc 3 '(a b c out))
| a | b | c | out |
|---+---+---+-----|
| 0 | 0 | 0 |     |
| 0 | 0 | 1 |     |
| 0 | 1 | 0 |     |
| 0 | 1 | 1 |     |
| 1 | 0 | 0 |     |
| 1 | 0 | 1 |     |
| 1 | 1 | 0 |     |
| 1 | 1 | 1 |     |


#+BEGIN_SRC elisp
  (truth-table-create 3)
#+END_SRC

#+RESULTS:
| 0 | 0 | 0 |
| 0 | 0 | 1 |
| 0 | 1 | 0 |
| 0 | 1 | 1 |
| 1 | 0 | 0 |
| 1 | 0 | 1 |
| 1 | 1 | 0 |
| 1 | 1 | 1 |


#+BEGIN_SRC elisp
  (truth-table-create 3 '(a b c out))
#+END_SRC

#+RESULTS:
| a | b | c | out |
| - | - | - |     |
| 0 | 0 | 0 |     |
| 0 | 0 | 1 |     |
| 0 | 1 | 0 |     |
| 0 | 1 | 1 |     |
| 1 | 0 | 0 |     |
| 1 | 0 | 1 |     |
| 1 | 1 | 0 |     |
| 1 | 1 | 1 |     |

#+BEGIN_SRC elisp
  (truth-table-create 3 '(a b c out))
#+END_SRC

#+RESULTS:
| a | b | c | out |
|---+---+---+-----|
| 0 | 0 | 0 |     |
| 0 | 0 | 1 |     |
| 0 | 1 | 0 |     |
| 0 | 1 | 1 |     |
| 1 | 0 | 0 |     |
| 1 | 0 | 1 |     |
| 1 | 1 | 0 |     |
| 1 | 1 | 1 |     |


















(setq x 2)
2

(funcall (lambda () (setq x (* x x))))
16

(let ((x 1)) (funcall (lambda () (setq x (* x x)))))
1

x
16


(defun get-x () x) 
get-x

(get-x)
16

